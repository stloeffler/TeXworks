# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  - push
  - pull_request

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
#  build-linux:
#    name: Build on Linux
#    # The type of runner that the job will run on
#    runs-on: ubuntu-latest
#    if: false
#
#    steps:
#    - name: Checkout
#      uses: actions/checkout@v2
#
#    - name: Install Dependencies
#      run: |
#        sudo apt update -y
#        sudo apt install -y qtbase5-dev qtscript5-dev qttools5-dev qttools5-dev-tools zlib1g-dev libhunspell-dev libpoppler-qt5-dev libpoppler-private-dev liblua5.3-dev xvfb
#
#    - name: Configure
#      run: |
#        pwd
#        mkdir build && cd build && cmake -DCMAKE_INSTALL_PREFIX='/usr' -DTW_BUILD_ID='github' ${GITHUB_WORKSPACE}
#
#    - name: Build
#      run: make -j
#      working-directory: build
#
#    - name: Test
#      run: xvfb-run ctest -V
#      working-directory: build

################################################################################

  build-mxe:
    name: Build for Windows (MXE)
    runs-on: ubuntu-latest
    if: false
    env:
      MXEDIR: /usr/lib/mxe
      MXETARGET: i686-w64-mingw32.static

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        wget -qO - "https://keyserver.ubuntu.com/pks/lookup?op=get&options=mr&search=0xC6BF758A33A3A276" | sudo apt-key add -
        sudo add-apt-repository --yes --update "deb https://pkg.mxe.cc/repos/apt xenial main"
        sudo apt install mxe-i686-w64-mingw32.static-cairo mxe-i686-w64-mingw32.static-curl mxe-i686-w64-mingw32.static-freetype mxe-i686-w64-mingw32.static-glib mxe-i686-w64-mingw32.static-hunspell mxe-i686-w64-mingw32.static-jpeg mxe-i686-w64-mingw32.static-lcms mxe-i686-w64-mingw32.static-libpng mxe-i686-w64-mingw32.static-libwebp mxe-i686-w64-mingw32.static-lua mxe-i686-w64-mingw32.static-openjpeg mxe-i686-w64-mingw32.static-poppler mxe-i686-w64-mingw32.static-qtbase mxe-i686-w64-mingw32.static-qtscript mxe-i686-w64-mingw32.static-qttools mxe-i686-w64-mingw32.static-tiff mxe-i686-w64-mingw32.static-zlib
      # FIXME: Build poppler (it changes too often)

    - name: Configure
      run: mkdir build && cd build && ${MXEDIR}/usr/bin/${MXETARGET}-cmake -DTW_BUILD_ID='github' -DCMAKE_INSTALL_PREFIX=install -DPLATFORM_DEPENDENCIES='freetype;harfbuzz_too;freetype;bz2' -DPoppler_ADDITIONAL_DEPENDENCIES='freetype;harfbuzz;freetype_too;glib-2.0;intl;iconv;ws2_32;winmm;tiff;webp;jpeg;openjp2;png;lcms2;lzma;bz2;pcre16;wtsapi32' -DTEXWORKS_ADDITIONAL_LIBS='wtsapi32;opengl32;imm32;shlwapi;dwmapi;uxtheme' ..


    - name: Build
      run: ${MXEDIR}/usr/bin/${MXETARGET}-cmake --build . && ${MXEDIR}/usr/bin/${MXETARGET}-strip TeXworks.exe
      working-directory: build

    - name: Install
      run: ${MXEDIR}/usr/bin/${MXETARGET}-cmake --build build --target install

#    - name: Package tests
#      run: mkdir tests && cp test_*.exe tests/
#      working-directory: build

    - run: find .

    - uses: actions/upload-artifact@v1
      with:
        name: TeXworks-MXE
        path: build/install

#    - uses: actions/upload-artifact@v1
#      with:
#        name: tw-mxe-tests
#        path: build/tests

################################################################################

  build-linux-legacy:
    name: Linux (legacy)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
        - qt: 5.3
          poppler: 0.24.5
          hunspell: 1.2.8
          poppler-data: 0.4.6
          cmake: 3.1.0
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Install Dependencies
      run: |
        sudo apt update -y
        sudo apt install -y zlib1g-dev liblua5.3-dev xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0

    - name: Install CMake ${{ matrix.cmake }}
      run: |
        wget https://github.com/Kitware/CMake/releases/download/v${{ matrix.cmake }}/cmake-${{ matrix.cmake }}-Linux-x86_64.tar.gz
        tar -xf cmake-${{ matrix.cmake }}-Linux-x86_64.tar.gz
        echo "::add-path::$(pwd)/cmake-${{ matrix.cmake }}-Linux-x86_64/bin"

    - name: Install Qt ${{ matrix.qt }}
      uses: jurplel/install-qt-action@v2
      with:
        version: '${{ matrix.qt }}'
        modules: 'qtscript'

    - name: Build Poppler ${{ matrix.poppler }}
      run: |
        wget https://poppler.freedesktop.org/poppler-${{ matrix.poppler }}.tar.xz
        tar -xf poppler-${{ matrix.poppler }}.tar.xz
        cd poppler-${{ matrix.poppler }}
        mkdir build && cd build
        cmake -DENABLE_XPDF_HEADERS=ON -DENABLE_UNSTABLE_API_ABI_HEADERS=ON ENABLE_XPDF_HEADERS=ON -DENABLE_LIBOPENJPEG=unmaintained -DBUILD_GTK_TESTS=OFF -DBUILD_QT4_TESTS=OFF -DBUILD_QT5_TESTS=OFF -DBUILD_CPP_TESTS=OFF -DENABLE_UTILS=OFF -DENABLE_CPP=OFF -DENABLE_GLIB=OFF ..
        make -j
        sudo make install
        cd ${GITHUB_WORKSPACE}
        # poppler-data
        wget https://poppler.freedesktop.org/poppler-data-${{ matrix.poppler-data }}.tar.gz
        tar -xf poppler-data-${{ matrix.poppler-data }}.tar.gz
        cd poppler-data-${{ matrix.poppler-data }}
        sudo make install

    - name: Build Hunspell ${{ matrix.hunspell }}
      run: |
        # Hunspell <= 1.3.3 are on SourceForge, later versions are on GitHub
        wget https://downloads.sourceforge.net/project/hunspell/Hunspell/${{ matrix.hunspell }}/hunspell-${{ matrix.hunspell }}.tar.gz
        tar -xf hunspell-${{ matrix.hunspell }}.tar.gz
        cd hunspell-${{ matrix.hunspell }}
        autoreconf -vfi
        ./configure --disable-dependency-tracking
        make -j
        sudo make install

    - name: Configure
      run: |
        mkdir build && cd build && cmake -DTW_BUILD_ID='github' ${GITHUB_WORKSPACE}

    - name: Build
      run: make -j
      working-directory: build

    - name: Test
      run: LD_LIBRARY_PATH="/usr/local/lib:${LD_LIBRARY_PATH}" QT_QPA_PLATFORM_PLUGIN_PATH="${Qt5_DIR}/plugins/platforms" xvfb-run ctest -V
      working-directory: build

################################################################################

  build-linux:
    name: Linux
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Install Dependencies
      run: |
        sudo apt update -y
        sudo apt install -y qtbase5-dev qtscript5-dev qttools5-dev qttools5-dev-tools zlib1g-dev libhunspell-dev libpoppler-qt5-dev libpoppler-private-dev poppler-data liblua5.3-dev xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0

    - name: Configure
      run: |
        mkdir build && cd build && cmake -DTW_BUILD_ID='github' ${GITHUB_WORKSPACE}

    - name: Build
      run: make -j
      working-directory: build

    - name: Test
      run: xvfb-run ctest -V
      working-directory: build

################################################################################

  build-win-msys:
    name: Windows (MSYS)
    runs-on: windows-latest
    defaults:
      run:
        shell: cmd

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup MSYS
      uses: numworks/setup-msys2@v1
      with:
        update: true

    - name: Install dependencies
      # git is needed for getting git revision information
      run: msys2do pacman --noconfirm -S mingw-w64-x86_64-cmake git make mingw-w64-x86_64-gcc mingw-w64-x86_64-hunspell mingw-w64-x86_64-lua mingw-w64-x86_64-poppler mingw-w64-x86_64-qt5

    - run: msys2do git status

    - name: Configure
      run: msys2do cmake -G `\`"MSYS Makefiles`\`" -B build -DTW_BUILD_ID='github' -DTEXWORKS_ADDITIONAL_LIBS='shlwapi'

    - name: Build
      run: msys2do make -j
      working-directory: build

    - name: Test
      run: msys2do ctest -V
      working-directory: build

################################################################################

  build-macosx:
    name: Mac OS X
    runs-on: macos-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Install Dependencies
      run: |
        brew update > brew_update.log || { print_error "Updating homebrew failed"; cat brew_update.log; exit 1; }
        brew install hunspell poppler lua qt5

    - name: Configure
      run: cmake -B build -DTW_BUILD_ID='github' ${GITHUB_WORKSPACE} -DCMAKE_PREFIX_PATH="/usr/local/opt/qt5"

    - name: Build
      run: make -j
      working-directory: build

    - name: Test
      run: QT_QPA_PLATFORM_PLUGIN_PATH="${Qt5_DIR}/plugins/platforms" ctest -V
      working-directory: build

  build-docker:
    name: ${{ matrix.distro }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
        - distro: Arch Linux
          file: Dockerfile.arch
        - distro: Fedora
          file: Dockerfile.fedora
        - distro: openSUSE
          file: Dockerfile.opensuse
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Build
      run: docker build -f .github/workflows/${{ matrix.file }} .
