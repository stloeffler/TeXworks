name: Test
on:
  - push

jobs:
  linux:
    name: Linux
    runs-on: ubuntu-latest
    if: false

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0 # fetch the entire history so we can create the changelog

    - name: Package for Launchpad
      id: package
      uses: ./.github/actions/package-launchpad
      with:
        DEB_PASSPHRASE: ${{ secrets.DEB_PASSPHRASE }}
        DECRYPTION_KEY: ${{ secrets.DECRYPTION_KEY }}

    - name: Deploy to Launchpad
      uses: ./.github/actions/deploy-launchpad
      with:
        changes_files: ${{ steps.package.outputs.changes_files }}
        devel-repo: "ppa:st.loeffler/test"
        stable-repo: "ppa:st.loeffler/test"

################################################################################

  wsl-test:
    runs-on: windows-latest
    if: false

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup WSL
      uses: Vampire/setup-wsl@v1
      with:
        additional-packages: apt-transport-https ca-certificates dirmngr

    - name: Install Dependencies
      shell: wsl-bash {0}
      run: |
        echo "deb https://pkg.mxe.cc/repos/apt stretch main" | sudo tee -a /etc/apt/sources.list
        sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C6BF758A33A3A276
        sudo apt update
        sudo apt install --assume-yes mxe-i686-w64-mingw32.static-qtbase

        MXEDIR=/usr/lib/mxe
        MXETARGET=i686-w64-mingw32.static
        sudo rm -f "${MXEDIR}/usr/i686-w64-mingw32.static/share/cmake/mxe-conf.d/ccache.cmake"

    - name: Build
      shell: wsl-bash {0}
      working-directory: test
      run: |
        mkdir build && cd build
        /usr/lib/mxe/usr/bin/i686-w64-mingw32.static-cmake ..
        make

    - name: Run
      working-directory: test/build
      shell: bash
      run: |
        pwd
        ls
        export QT_FORCE_STDERR_LOGGING=1
        ./tst.exe
        echo "OK"

################################################################################

  wsl:
    name: WSL
    runs-on: windows-latest
    env:
      QT_FORCE_STDERR_LOGGING: 1

    steps:
    - name: Checkout
      uses: actions/checkout@v2

#    - name: Setup MSYS
#      uses: msys2/setup-msys2@v2
#      with:
#        install: mingw-w64-x86_64-cmake

    - name: Setup WSL
      uses: Vampire/setup-wsl@v1
      with:
#        update: true
        additional-packages: apt-transport-https ca-certificates dirmngr
# software-properties-common for add-apt-repository

    - name: Install Dependencies
      shell: wsl-bash {0}
      run: |
        echo "::group::Install MXE"
        echo "deb https://pkg.mxe.cc/repos/apt stretch main" | sudo tee -a /etc/apt/sources.list
        sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C6BF758A33A3A276
        sudo apt update
        sudo apt install --assume-yes libgdk-pixbuf2.0-dev lzip mxe-i686-w64-mingw32.static-cairo mxe-i686-w64-mingw32.static-curl mxe-i686-w64-mingw32.static-freetype mxe-i686-w64-mingw32.static-glib mxe-i686-w64-mingw32.static-hunspell mxe-i686-w64-mingw32.static-jpeg mxe-i686-w64-mingw32.static-lcms mxe-i686-w64-mingw32.static-libpng mxe-i686-w64-mingw32.static-libwebp mxe-i686-w64-mingw32.static-lua mxe-i686-w64-mingw32.static-openjpeg mxe-i686-w64-mingw32.static-qtbase mxe-i686-w64-mingw32.static-qtdeclarative mxe-i686-w64-mingw32.static-qtscript mxe-i686-w64-mingw32.static-qttools mxe-i686-w64-mingw32.static-tiff mxe-i686-w64-mingw32.static-zlib

        MXEDIR=/usr/lib/mxe
        MXETARGET=i686-w64-mingw32.static
        sudo chmod --recursive a+w ${MXEDIR}
        #echo "MXE_TARGETS := ${MXETARGET}" >> ${MXEDIR}/settings.mk
        #echo "MXE_USE_CCACHE=" >> ${MXEDIR}/settings.mk
        rm -f "${MXEDIR}/usr/i686-w64-mingw32.static/share/cmake/mxe-conf.d/ccache.cmake"
        echo "::endgroup::"

        echo "::group::Build poppler"
        rm -f ${MXEDIR}/src/poppler*
        cp ci/travis-ci/mxe/poppler* ${MXEDIR}/src/
        cd ${MXEDIR}
        make download-only-poppler
        make build-only-poppler_${MXETARGET}
        echo "::endgroup::"

    - name: Configure
      shell: wsl-bash {0}
      run: |
        mkdir build && cd build
        /usr/lib/mxe/usr/bin/i686-w64-mingw32.static-cmake -DTW_BUILD_ID='github' .. \
          -DPLATFORM_DEPENDENCIES='freetype;harfbuzz;freetype_too;bz2;iphlpapi;ssl;crypto;crypt32;ws2_32' \
          -DPoppler_ADDITIONAL_DEPENDENCIES='freetype;harfbuzz;freetype_too;glib-2.0;intl;iconv;ws2_32;winmm;tiff;webp;jpeg;openjp2;png;lcms2;lzma;bz2;pcre16;wtsapi32' \
          -DTEXWORKS_ADDITIONAL_LIBS='freetype;harfbuzz;freetype_too;bz2;wtsapi32;opengl32;imm32;shlwapi;dwmapi;uxtheme' \
          -Dgp_tool='none'
        if [ -f "CMakeFiles/CMakeError.log" ]; then
          echo "=== CMake Error Log ==="
          cat "CMakeFiles/CMakeError.log"
        fi

    - name: Build
      shell: wsl-bash {0}
      run: |
        cd build
        make VERBOSE=1
        /usr/lib/mxe/usr/bin/i686-w64-mingw32.static-strip --strip-all *.exe
        ls -lisah

    - run: echo "${{ github.workspace }}"

    - name: Prepare testing
      shell: wsl-bash {0}
      run: |
        echo "::group::Fetch poppler-data"
        POPPLERDATA_VERSION="0.4.10"
        POPPLERDATA_SUBDIR="poppler-data-${POPPLER_DATA_VERSION}"
        POPPLERDATA_FILE="poppler-data-${POPPLER_DATA_VERSION}.tar.gz"
        POPPLERDATA_URL="https://poppler.freedesktop.org/${POPPLER_DATA_FILE}"
        POPPLERDATA_SHA256="6e2fcef66ec8c44625f94292ccf8af9f1d918b410d5aa69c274ce67387967b30"
        wget "${POPPLER_DATA_URL}"
        CHKSUM=$(openssl dgst -sha256 "${POPPLERDATA_FILE}" 2> /dev/null)
        if [ "${CHKSUM}" != "SHA256(${POPPLERDATA_FILE})= ${POPPLERDATA_SHA256}" ]; then
          print_error "Wrong checksum"
          print_error "${CHKSUM}"
          print_error "(expected: ${POPPLERDATA_SHA256})"
          exit 1
        fi
        tar -x -C "build/share/" -f "${POPPLERDATA_FILE}" && mv "build/share/${POPPLERDATA_SUBDIR}" "build/share/poppler"
        echo "::endgroup::"
        echo "::group::Fixup CTest files"
        SRC=$(pwd)
        DST=$(echo "${{ github.workspace }}" | tr '\\' '/')
        cd build
        find . -name CTestTestfile.cmake
        for FILE in $(find . -name CTestTestfile.cmake); do
          echo ">> $FILE <<"
          cat "$FILE"
          sed -ie "s|${SRC}|${DST}|g" "$FILE"
          echo "---"
          cat "$FILE"
        done
        echo "::endgroup::"

    - name: Upload test_poppler-qt5
      uses: actions/upload-artifact@v2
      with:
        name: test_poppler-qt5
        path: build/test_poppler-qt5.exe

    - run: ../../../build/test_poppler-qt5.exe
      working-directory: modules/QtPDF/unit-tests
      shell: bash
#      shell: msys2 {0}

    - run: ../build/test_BibTeXFile.exe
      working-directory: testcases
      shell: bash
#      shell: msys2 {0}

    - run: ../build/test_Utils.exe
      working-directory: testcases
      shell: bash
#      shell: msys2 {0}

    - run: ../build/test_Scripting.exe
      working-directory: testcases
      shell: bash
#      shell: msys2 {0}

    - run: ../build/test_LuaScripting.exe
      working-directory: testcases
      shell: bash
#      shell: msys2 {0}

    - run: ../build/test_UI.exe
      working-directory: testcases
      shell: bash
#      shell: msys2 {0}

    - run: ../build/test_Document.exe
      working-directory: testcases
      shell: bash
#      shell: msys2 {0}

    - name: Test
      run: ctest -V
      working-directory: build
      shell: bash
#      shell: msys2 {0}

    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        name: artifact
        path: build/TeXworks.exe


################################################################################

  win:
    name: Windows
    runs-on: windows-latest
    if: false
    defaults:
      run:
        shell: msys2 {0}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup MSYS
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: mingw-w64-x86_64-cmake make mingw-w64-x86_64-gcc mingw-w64-x86_64-qt5-static sed
#        install: mingw-w64-x86_64-cmake git make mingw-w64-x86_64-gcc mingw-w64-x86_64-hunspell mingw-w64-x86_64-lua mingw-w64-x86_64-poppler mingw-w64-x86_64-qt5

    - name: Configure
      run: cmake -G 'MSYS Makefiles' -B build
      working-directory: test

    - name: Build
      run: make -j VERBOSE=1
      working-directory: test/build

    - run: objdump -x test.exe | sed -ne 's/\s*DLL Name:\s+//p'
      working-directory: test/build

    - name: Strip
      run: strip test.exe
      working-directory: test/build

    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        name: artifact
        path: test/build/test.exe

    - run: find /mingw64/bin/ -iname '*.dll'

################################################################################

  macos:
    name: Mac OS X (Homebrew)
    runs-on: macos-latest
    if: false

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - run: mkdir build

    - name: Package
      id: package
      uses: ./.github/actions/package-macos

    - run: echo "${{ steps.package.outputs.file }}"
