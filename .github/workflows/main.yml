# This is a basic workflow to help you get started with Actions

name: TeXworks CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  - push
  - pull_request

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-linux:
    name: Build on Linux
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    if: false

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Install Dependencies
      run: |
        sudo apt update -y
        sudo apt install -y qtbase5-dev qtscript5-dev qttools5-dev qttools5-dev-tools zlib1g-dev libhunspell-dev libpoppler-qt5-dev libpoppler-private-dev liblua5.3-dev xvfb

    - name: Configure
      run: |
        pwd
        mkdir build && cd build && cmake -DCMAKE_INSTALL_PREFIX='/usr' -DTW_BUILD_ID='github' ${GITHUB_WORKSPACE}

    - name: Build
      run: make -j
      working-directory: build

    - name: Test
      run: xvfb-run ctest -V
      working-directory: build

################################################################################

  build-mxe:
    name: Build for Windows (MXE)
    runs-on: ubuntu-latest
    env:
      MXEDIR: /usr/lib/mxe
      MXETARGET: i686-w64-mingw32.static

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        wget -qO - "https://keyserver.ubuntu.com/pks/lookup?op=get&options=mr&search=0xC6BF758A33A3A276" | sudo apt-key add -
        sudo add-apt-repository --yes --update "deb https://pkg.mxe.cc/repos/apt xenial main"
        sudo apt install mxe-i686-w64-mingw32.static-cairo mxe-i686-w64-mingw32.static-curl mxe-i686-w64-mingw32.static-freetype mxe-i686-w64-mingw32.static-glib mxe-i686-w64-mingw32.static-hunspell mxe-i686-w64-mingw32.static-jpeg mxe-i686-w64-mingw32.static-lcms mxe-i686-w64-mingw32.static-libpng mxe-i686-w64-mingw32.static-libwebp mxe-i686-w64-mingw32.static-lua mxe-i686-w64-mingw32.static-openjpeg mxe-i686-w64-mingw32.static-qtbase mxe-i686-w64-mingw32.static-qtscript mxe-i686-w64-mingw32.static-qttools mxe-i686-w64-mingw32.static-tiff mxe-i686-w64-mingw32.static-zlib

    - name: Configure
      run: ${MXEDIR}/usr/bin/${MXETARGET}-cmake -B build -DTW_BUILD_ID='github' -DTEXWORKS_ADDITIONAL_LIBS='shlwapi' -DCMAKE_INSTALL_PREFIX=install

    - name: Build
      run: ${MXEDIR}/usr/bin/${MXETARGET}-cmake --build build --parallel

    - name: Install
      run: ${MXEDIR}/usr/bin/${MXETARGET}-cmake --build build --target install

    - run: find .

################################################################################

  build-win:
    name: Build on Windows
    runs-on: windows-latest
#    defaults:
#      run:
#        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v2

#    - name: Install Dependencies
#      run: |
#        vcpkg install hunspell:x64-windows lua:x64-windows zlib:x64-windows freetype:x64-windows lcms:x64-windows libjpeg-turbo:x64-windows
#        find C:/vcpkg/packages/
#
#    - name: Install Qt
#      uses: jurplel/install-qt-action@v2
#      with:
#        modules: 'qtscript'
#
#    - name: Build Poppler
#      run: python .github/workflows/build-poppler.py
#
#    - name: Configure
#      run: cmake -B build -DTW_BUILD_ID='github' -DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake ${GITHUB_WORKSPACE}
#
#    - name: Build
#      run: cmake --build build
#
#    - name: Test
#      run: ctest -V
#      working-directory: build
    - name: Setup MSYS
      uses: numworks/setup-msys2@v1
      with:
        update: true

    - run: msys2do pacman -Ss qt5
    - run: msys2do pacman -Ss poppler

    - name: Install dependencies
      # git, diffutils are needed by getGitRevInfo.sh
      run: msys2do pacman --noconfirm -S git mingw-w64-x86_64-cmake mingw-w64-x86_64-make mingw-w64-x86_64-gcc mingw-w64-x86_64-diffutils mingw-w64-x86_64-qt5 mingw-w64-x86_64-poppler mingw-w64-x86_64-hunspell mingw-w64-x86_64-lua
#      run: msys2do pacman --noconfirm -S mingw-w64-x86_64-cmake mingw-w64-x86_64-make

    - run: msys2do find /usr/bin
    - run: msys2do find / -iname Qt5Core.dll
    - run: msys2do find / -iname libgcc_s_seh-1.dll
    - run: msys2do find / -iname libhunspell-1.7-0.dll
    - run: msys2do find / -iname libpoppler-qt5-1.dll
    - run: msys2do find / -iname libstdc++-6.dll
    - run: msys2do find / -iname zlib1.dll

    - name: Update Git Revision Info
      run: msys2do ./getGitRevInfo.sh

    - name: Configure
# FIXME: Replace hardcoded path
#      run: d:\a\_temp\msys\msys64\usr\bin\bash.exe -ilc "cd `$OLDPWD && cmake -G 'MSYS Makefiles' -DCMAKE_MAKE_PROGRAM='mingw32-make' -B build -DTW_BUILD_ID='github' -DTEXWORKS_ADDITIONAL_LIBS='shlwapi'"
      run: msys2do cmake -G `\`"MSYS Makefiles`\`" -DCMAKE_MAKE_PROGRAM='mingw32-make' -B build -DTW_BUILD_ID='github' -DTEXWORKS_ADDITIONAL_LIBS='shlwapi' -DCMAKE_INSTALL_PREFIX=install

#      run: msys2do cmake -G "MSYS Makefiles" -B build
#      run: msys2do cmake -G `"MSYS Makefiles`" -B build
#      run: msys2do cmake -G `\"MSYS Makefiles`\" -B build

    - name: Build
      run: msys2do cmake --build build --parallel

    - run: msys2do find .

    - name: Test
      run: msys2do ctest -V
      working-directory: build

    - name: Install
      run: msys2do cmake --build build --target install

    - name: Copy DLLs
      run: msys2do cp /mingw64/bin/Qt5Core.dll /mingw64/bin/libgcc_s_seh-1.dll /mingw64/bin/libstdc++-6.dll /mingw64/bin/libhunspell-1.7-0.dll /mingw64/bin/libpoppler-qt5-1.dll /mingw64/bin/Qt5Concurrent.dll /mingw64/bin/Qt5Gui.dll /mingw64/bin/Qt5Script.dll /mingw64/bin/Qt5ScriptTools.dll /mingw64/bin/Qt5Widgets.dll /mingw64/bin/Qt5Xml.dll /mingw64/bin/zlib1.dll install/

    - uses: actions/upload-artifact@v1
      with:
        name: TeXworks
        path: install

  build-macosx:
    name: Build on Mac OS X
    runs-on: macos-latest
    if: false

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Install Dependencies
      run: |
        brew update > brew_update.log || { print_error "Updating homebrew failed"; cat brew_update.log; exit 1; }
        brew install qt5
        brew install poppler
        brew install hunspell
        brew install lua

    - name: Configure
      run: cmake -B build -DTW_BUILD_ID='github' ${GITHUB_WORKSPACE} -DCMAKE_PREFIX_PATH="/usr/local/opt/qt5"

    - name: Build
      run: cmake --build build

    - name: Test
      run: ctest -V
      working-directory: build
